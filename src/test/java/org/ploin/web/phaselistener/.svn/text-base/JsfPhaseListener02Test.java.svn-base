package org.ploin.web.phaselistener;

import mock.FacesContextMock;
import mock.LifecycleMock;
import org.ploin.web.faces.phaselistener.JsfPhaseListener02;
import org.ploin.web.flow.Flow;
import org.ploin.web.flow.FlowControl;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import javax.faces.context.FacesContext;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.faces.lifecycle.Lifecycle;
import javax.servlet.http.HttpSession;
import java.util.List;

/**
 * <code><pre>
 *                                    ........
 *                                 .WHHUUVOOOOU&,
 *     dMMMMMMMMMMMa,   .MMMMF   .MHW0Oz+!``````?G.   .MMMM% .MMMMMMMMMMMN,
 *    .MMMMMMMMMMMMMMr  JMMMM   JHHXwOz;:^..```  `O,  JMMM#  dMMMMMMMMMMMMN
 *    JMMM#     ,MMMMF  MMMMF  .MHVXwOz++.^.````  +n .MMMM$ .MMMMt    dMMM#
 *   .MMMMt     .MMMMt .MMMM!  JMHWWXwOz++....  `.+X JMMMM  JMMMM    .MMMM%
 *   JMMM#     .MMMM@  dMMM#   ,MHHWWXwOzz+++....?df MMMMF .MMMMF    JMMM#
 *  .MMMMNNNNNMMMMMD   MMMMMNNm 4MHHWWXXwOOzzz1+1wX'.MMMM! .MMMM`   .MMMM$
 *  .MMMMMMMMMMMM"`    .YMMMMMF  TMHHHWWWXXXwwwwXK! MMMMF  MMMMF    JMMMM
 *  MMMMF                          TMMHHHHHWWWHY^
 * .MMMM'                             `7""""^`
 * dMMM#
 * </pre></code>
 * <p/>
 * $HeadURL$<br>
 * $LastChangedBy$<br>
 * $Revision$<br>
 * $Date$<br>
 */
public class JsfPhaseListener02Test {


	private JsfPhaseListener02 listener;

	/**
	 * Here we setup the PhaseListener.
	 */
	@BeforeClass
	public void before(){
		listener = new JsfPhaseListener02();		
	}


	/**
	 * Here we test the getter an setter of the phaseListener
	 */
	@Test
	public void getterAndSetter(){
		FacesContext fc = new FacesContextMock();
		listener.setFacesContextTest(fc);
		assertNotNull(listener.getFacesContextTest());
	}

	/**
	 * Here we are testing the getPhaseId method. <br/>
	 * We expect APPLY_REQUEST_VALUES
	 */
	@Test
	public void getPhaseId(){
		assertNotNull(listener.getPhaseId());
		assertEquals(listener.getPhaseId(), PhaseId.APPLY_REQUEST_VALUES);
	}


	/**
	 * Here we are checking the afterPhase method.<br/>
	 * we expect no exception.
	 */
	@Test
	public void afterPhase(){
		Lifecycle life = new LifecycleMock();
		FacesContext fc = new FacesContextMock();
		listener.afterPhase(new PhaseEvent(fc, PhaseId.APPLY_REQUEST_VALUES, life));
		assert 1==1;
	}

	
	/**
	 * In this testcase, we are testing the beforePhase method. <br/>
	 * We expect that the session Attribute ploinploin is equal to null.
	 */
	@Test(dependsOnMethods = {"getterAndSetter"})
	public void beforePhase1(){
		Lifecycle life = new LifecycleMock();
		FacesContext fc = listener.getFacesContextTest();
		listener.beforePhase(new PhaseEvent(fc, PhaseId.APPLY_REQUEST_VALUES, life));
		HttpSession session = (HttpSession)fc.getExternalContext().getSession(true);
		String pffvi = (String)session.getAttribute("ploinploin");
		assertEquals(pffvi, null);
	}

	/**
	 * In this testcase, we are testing the beforePhase method. <br/>
	 * We expect that the session Attribute ploinploin is equal to null.
	 */
	@Test(dependsOnMethods = {"beforePhase1"})
	public void beforePhase2(){
		Lifecycle life = new LifecycleMock();
		FacesContext fc = listener.getFacesContextTest();
		fc.getViewRoot().setViewId("test");
		FlowControl flowC = new FlowControl();
		fc.getExternalContext().getApplicationMap().put("ploinFlows", flowC.readFlows());
		listener.beforePhase(new PhaseEvent(fc, PhaseId.APPLY_REQUEST_VALUES, life));
		HttpSession session = (HttpSession)fc.getExternalContext().getSession(true);
		String pffvi = (String)session.getAttribute("ploinploin");
		assertEquals(pffvi, null);
	}

}
